{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","changeSize","increase","setState","prevState","array","push","size","pop","calculateMod","n","m","state","divisor","generateArray","i","this","className","onClick","value","onChange","e","target","type","map","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iOAkFeA,G,kBA5Eb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAkBRC,WAAa,SAACC,GACRA,EACF,EAAKC,UAAS,SAAAC,GAEZ,OADAA,EAAUC,MAAMC,KAAKF,EAAUG,KAAO,GAC/B,CACLA,KAAMH,EAAUG,KAAO,EACvBF,MAAOD,EAAUC,UAIrB,EAAKF,UAAS,SAAAC,GAEZ,OADAA,EAAUC,MAAMG,MACT,CACLD,KAAMH,EAAUG,KAAO,EACvBF,MAAOD,EAAUC,WAjCN,EAuCnBI,aAAe,SAACC,EAAGC,GACjB,OAASD,EAAEC,EAAM,EAAKC,MAAMC,SAtC5B,EAAKD,MAAQ,CACXP,MAAO,GACPE,KAAM,EACNM,QAAS,GALM,E,kFAWjB,IADA,IAAMC,EAAgB,GACbC,EAAI,EAAGA,EAAIC,KAAKJ,MAAML,KAAO,EAAGQ,GAAQ,EAC/CD,EAAcR,KAAKS,GAErBC,KAAKb,SAAS,CACZE,MAAOS,M,+BA4BD,IAAD,OACP,OACE,yBAAKG,UAAU,OACb,yBAAKA,UAAU,WACb,6BAAMD,KAAKJ,MAAML,MACjB,4BAAQW,QAAS,kBAAM,EAAKjB,YAAW,KAAvC,KACA,4BAAQiB,QAAS,kBAAM,EAAKjB,YAAW,KAAvC,KACA,2BAAOkB,MAAOH,KAAKJ,MAAMC,QAASO,SAAU,SAACC,GAAD,OAAO,EAAKlB,SAAS,CAACU,QAASQ,EAAEC,OAAOH,SAASI,KAAK,YAEpG,yBAAKN,UAAU,QACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,OAAf,KACCD,KAAKJ,MAAMP,MAAMmB,KAAI,SAAAd,GACpB,OAAO,yBAAKO,UAAU,aAAaQ,IAAKf,GAAIA,OAG/CM,KAAKJ,MAAMP,MAAMmB,KAAI,SAAAd,GACpB,OACE,yBAAKO,UAAU,MAAMQ,IAAKf,GACxB,yBAAKO,UAAU,cAAcP,GAC5B,EAAKE,MAAMP,MAAMmB,KAAI,SAAAb,GACpB,OAAO,yBAAKM,UAAU,MAAMQ,IAAKd,GAAI,EAAKF,aAAaC,EAAGC,iB,GAjE1De,IAAMC,YCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.0dd51ae8.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: [],\n      size: 5,\n      divisor: 1,\n    }\n  }\n\n  componentWillMount() {\n    const generateArray = [];\n    for (let i = 1; i < this.state.size + 1; i = i + 1) {\n      generateArray.push(i);\n    }\n    this.setState({\n      array: generateArray,\n    })\n  }\n\n  changeSize = (increase) => {\n    if (increase) {\n      this.setState(prevState => {\n        prevState.array.push(prevState.size + 1);\n        return {\n          size: prevState.size + 1,\n          array: prevState.array,\n        }\n      });\n    } else {\n      this.setState(prevState => {\n        prevState.array.pop();\n        return {\n          size: prevState.size - 1,\n          array: prevState.array,\n        }\n      });\n    }\n  }\n\n  calculateMod = (n, m) => {\n    return ((n*m) % (this.state.divisor));\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"control\">\n          <div>{this.state.size}</div>\n          <button onClick={() => this.changeSize(true)}>+</button>\n          <button onClick={() => this.changeSize(false)}>-</button>\n          <input value={this.state.divisor} onChange={(e) => this.setState({divisor: e.target.value})} type=\"number\"></input>\n        </div>\n        <div className=\"grid\">\n          <div className=\"row\">\n            <div className=\"box\"> </div>\n            {this.state.array.map(n => {\n              return <div className=\"box header\" key={n}>{n}</div>\n            })}\n          </div>\n          {this.state.array.map(n => {\n            return (\n              <div className=\"row\" key={n}>\n                <div className=\"box header\">{n}</div>\n                {this.state.array.map(m => {\n                  return <div className=\"box\" key={m}>{this.calculateMod(n, m)}</div>\n                })}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}