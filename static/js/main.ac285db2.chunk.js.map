{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","changeSize","increase","setState","prevState","array","push","size","pop","changeMode","prevMode","mode","divisor","state","pixelsDefaultSize","i","numbersDefaultSize","forceUpdate","calculateMod","n","m","calculateColor","k","min","max","darkestShade","rgbHex","shade","Math","renderRow","calculatedArray","map","forSorting","Object","assign","sort","a","b","length","className","style","backgroundColor","minWidth","height","padding","width","generateArray","this","defaultBoxStyle","onClick","data-tip","data-for","id","value","onChange","e","target","type","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ac285db2.chunk.js","sourcesContent":["import React from 'react';\nimport rgbHex from 'rgb-hex';\nimport ReactToolTip from 'react-tooltip';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: [],\n      size: 40,\n      numbersDefaultSize: 40,\n      pixelsDefaultSize: 400,\n      divisor: 40,\n      mode: 'numbers',\n    }\n  }\n\n  componentWillMount() {\n    const generateArray = [];\n    for (let i = 1; i < this.state.size + 1; i = i + 1) {\n      generateArray.push(i);\n    }\n    this.setState({\n      array: generateArray,\n    })\n  }\n\n  changeSize = (increase) => {\n    if (increase) {\n      this.setState(prevState => {\n        prevState.array.push(prevState.size + 1);\n        return {\n          size: prevState.size + 1,\n          array: prevState.array,\n        }\n      });\n    } else {\n      this.setState(prevState => {\n        prevState.array.pop();\n        return {\n          size: prevState.size - 1,\n          array: prevState.array,\n        }\n      });\n    }\n  }\n\n  changeMode = (prevMode) => {\n    if (prevMode === 'numbers') {\n      this.setState({\n        mode: 'pixels',\n        divisor: this.state.pixelsDefaultSize,\n      });\n      for (let i = 0; i < this.state.pixelsDefaultSize - this.state.size; i = i + 1) {\n        this.changeSize(true);\n      }\n    } else {\n      this.setState({\n        mode: 'numbers',\n        divisor: this.state.numbersDefaultSize,\n      });\n      for (let i = 0; i < this.state.size - this.state.numbersDefaultSize; i = i + 1) {\n        this.changeSize(false);\n      }\n    }\n    this.forceUpdate();\n  }\n\n  calculateMod = (n, m) => {\n    return ((n*m) % (this.state.divisor));\n  }\n\n  calculateColor = (k, min, max) => {\n    let darkestShade = 0.5;\n    if (this.state.mode === 'numbers') darkestShade = 0.5;\n    else darkestShade = 1;\n    if (max - min === 0) return rgbHex(0, 0, 0, 0);\n    else {\n      const shade = Math.min((k / ((1/(darkestShade))*(max - min))), darkestShade);\n      return rgbHex(0, 0, 0, shade);\n    }\n\n  }\n\n  renderRow = (n) => {\n    const calculatedArray = this.state.array.map(m => this.calculateMod(n, m));\n    const forSorting = Object.assign([], calculatedArray);\n    forSorting.sort((a, b) => (a-b));\n    const min = forSorting[0];\n    const max = forSorting[forSorting.length - 1];\n    if (this.state.mode === 'numbers') {\n      return (\n        <>\n          {calculatedArray.map(k => {\n            return <div className=\"box\" style={{backgroundColor: '#' + this.calculateColor(k, min, max), minWidth: '20px', height: '20px', padding: '10px'}}>{k}</div>\n          })}\n        </>\n      )\n    }\n    else {\n      return (\n        <>\n          {calculatedArray.map(k => {\n            return <div className=\"box\" style={{backgroundColor: '#' + this.calculateColor(k, min, max), width: '5px', height: '5px'}} />\n          })}\n        </>\n      )\n    }\n  }\n\n  render() {\n    const defaultBoxStyle = {\n      minWidth: '20px',\n      height: '20px',\n      padding: '10px',\n    }\n    return (\n      <div className=\"App\">\n        <div className=\"control\">\n          <div className=\"size\">Size of table: {this.state.size}</div>\n          <button onClick={() => this.changeSize(true)}>+</button>\n          <button onClick={() => this.changeSize(false)}>-</button>\n          <div className=\"divisor\" data-tip data-for=\"divisor\">Divisor: </div>\n          <ReactToolTip id=\"divisor\">The number by which all elements of the table are divided by</ReactToolTip>\n          <input value={this.state.divisor} onChange={(e) => this.setState({divisor: e.target.value})} type=\"number\"></input>\n          {this.state.mode === 'numbers' ?\n            <>\n            <button onClick={() => this.changeMode('numbers')} data-tip data-for=\"numbers\">Pixel mode</button>\n            <ReactToolTip id=\"numbers\">See the bigger pattern behind this table!</ReactToolTip>\n            Pixel mode may take a few seconds to render\n            </>\n            :\n            <>\n            <button onClick={() => this.changeMode('pixels')} data-tip data-for=\"pixels\">Numbers mode</button>\n            <ReactToolTip id=\"pixels\">See the values of each number!</ReactToolTip>\n            </>\n          }\n        </div>\n        <div className=\"grid\">\n          {this.state.mode === 'numbers' ?\n            <div className=\"row\">\n              <div className=\"box\" style={defaultBoxStyle}/>\n              {this.state.array.map(n => {\n                return <div className=\"box header top\" style={defaultBoxStyle} key={n}>{n}</div>\n              })}\n            </div>\n            :\n            null\n          }\n          {this.state.array.map(n => {\n            return (\n              <div className=\"row\" key={n}>\n                {this.state.mode === 'numbers' ?\n                  <div className=\"box header side\" style={defaultBoxStyle}>{n}</div>\n                  :\n                  null\n                }\n                {this.renderRow(n)}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}